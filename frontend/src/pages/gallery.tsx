import { useState, useEffect } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { motion } from 'framer-motion';
import prisma from '@/lib/prisma';
import type { GetServerSideProps } from 'next';
import type { Prediction as DBPrediction } from '@prisma/client';
import { getSession } from 'next-auth/react';

type Prediction = Omit<DBPrediction, "input" | "output"> & {
    input: { prompt?: string };
    output: string[];
}

const LOGOS_PER_PAGE = 12;

type GalleryPageProps = {
    predictions: Prediction[];
    currentPage: number;
    totalPages: number;
};

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getSession(context);

    if (!session?.user?.id) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        };
    }

    const page = Number(context.query.page) || 1;

    const predictions = await prisma.prediction.findMany({
        where: {
            status: 'succeeded',
            userId: session.user.id,
        },
        orderBy: { created_at: 'desc' },
        take: LOGOS_PER_PAGE,
        skip: (page - 1) * LOGOS_PER_PAGE,
    });

    const totalPredictions = await prisma.prediction.count({
        where: {
            status: 'succeeded',
            userId: session.user.id,
        },
    });

    return {
        props: {
            predictions: JSON.parse(JSON.stringify(predictions)),
            currentPage: page,
            totalPages: Math.ceil(totalPredictions / LOGOS_PER_PAGE),
        },
    };
};

const GalleryPage = ({ predictions, currentPage, totalPages }: GalleryPageProps) => {
    return (
        <>
            <Head>
                <title>Inspiration Gallery - AI Logo Maker</title>
                <meta name="description" content="Browse a gallery of logos created by our AI." />
            </Head>
            <main className="container mx-auto px-4 py-12">
                <div className="text-center mb-12">
                    <h1 className="text-5xl font-extrabold text-brand-text mb-4">Inspiration Gallery</h1>
                    <p className="text-xl text-gray-600 max-w-3xl mx-auto">Discover what's possible. A curated collection of the best logos generated by our community and AI.</p>
                </div>
                {predictions.length === 0 ? (
                    <div className="text-center text-gray-500 flex flex-col items-center gap-4">
                        <p>You haven't created any logos yet.</p>
                        <Link href="/config" className="btn btn-primary">
                            Create Your First Logo
                        </Link>
                    </div>
                ) : (
                    <>
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                            {predictions.map((p) => (
                                <Link key={p.id} href={`/detail/${p.id}`} className="block border rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
                                    <div className="relative w-full" style={{ paddingTop: '100%' }}>
                                        {p.output && p.output[0] && (
                                            <Image
                                                src={p.output[0]}
                                                alt={p.input?.prompt || 'Generated Logo'}
                                                layout="fill"
                                                objectFit="cover"
                                                className="bg-gray-100"
                                                priority={false}
                                            />
                                        )}
                                    </div>
                                </Link>
                            ))}
                        </div>
                        <div className="flex justify-center items-center gap-4 mt-8">
                            {currentPage > 1 && (
                                <Link href={`/gallery?page=${currentPage - 1}`} className="neo-btn">
                                    Previous
                                </Link>
                            )}
                            {totalPages > 1 && (
                                <span className="font-bold">
                                    Page {currentPage} of {totalPages}
                                </span>
                            )}
                            {currentPage < totalPages && (
                                 <Link href={`/gallery?page=${currentPage + 1}`} className="neo-btn">
                                    Next
                                </Link>
                            )}
                        </div>
                    </>
                )}
            </main>
        </>
    );
};

export default GalleryPage; 